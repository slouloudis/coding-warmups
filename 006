Coding Challenge:
Create a function in JavaScript named groupElements that accepts an array of integers as an argument and groups the elements based on whether they are even or odd. The function should return an object with two keys: even and odd, each containing an array of numbers that are even and odd respectively.

For instance, groupElements([1, 2, 3, 4, 5, 6]) should return {"even": [2, 4, 6], "odd": [1, 3, 5]}.

function groupElements(arr) {
    // Initialize the object with even and odd keys as empty arrays.
    let groupedObj = {
        "even": [],
        "odd": []
    };

    // Loop through each element in the array
    for(let i = 0; i < arr.length; i++) {
        // If the element is even, push it to the even array in the object.
        if(arr[i] % 2 == 0) {
            groupedObj.even.push(arr[i]);
        }
        // If the element is odd, push it to the odd array in the object.
        else {
            groupedObj.odd.push(arr[i]);
        }
    }

    // Return the final grouped object.
    return groupedObj;
}

console.log(groupElements([1, 2, 3, 4, 5, 6]));  // Output: { even: [ 2, 4, 6 ], odd: [ 1, 3, 5 ] }



Refactored -> 

function groupElements(arr) {
    return arr.reduce((acc, num) => {
        let key = num % 2 === 0 ? 'even' : 'odd';
        acc[key].push(num);
        return acc;
    }, {
        even: [],
        odd: []
    });
}

console.log(groupElements([1, 2, 3, 4, 5, 6]));  // Output: { even: [ 2, 4, 6 ], odd: [ 1, 3, 5 ] }



The `reduce` function takes two arguments: a callback function, which is run for each element in the array, and an initial value for the accumulator.

The callback function itself takes two arguments: the accumulator and the current element. The role of the accumulator is to keep the result of the operation going from one element to the next one. 


```javascript
let array = [1, 2, 3, 4, 5];
let sum = array.reduce((accumulator, current) => accumulator + current, 0);
console.log(sum);  // Output: 15
```

In this example, we are reducing the array into a single value: the sum of all numbers. The initial value of the accumulator is `0`, and for each number in the array, we add it to the accumulator, then pass the result along to the next invocation of the callback for the next number.

In your specific problem of grouping numbers into "odd" and "even", here's how `reduce` works:

1. `reduce` starts with the initial value of `{even: [], odd: []}` which is our accumulator.

2. For each `num` in the `arr`, it determines the `key` ('even' or 'odd') based on `num % 2 === 0 ? 'even' : 'odd'`.

3. It then pushes the current `num` into the appropriate array in our accumulator using `acc[key].push(num)`.

4. Then it returns the accumulator to be used for the next iteration.

5. Once all iterations are done, it returns the final accumulator value which is our grouped object.
